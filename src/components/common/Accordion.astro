---
const panelsDummy = [
  {
    title: "Corporate Websites",
    body: "Each corporate website built by Nixxon Australia is tailored...",
    cta: ["Get Started", "Live Chat"],
    images: [Acc1, Acc2, Acc3, Acc4],
  },
  {
    title: "E-Commerce Websites",
    body: "Sell more with bespoke storefronts engineered for conversions.",
    cta: ["View Work"],
    images: [Acc1, Acc2, Acc3, Acc4],
  },
  {
    title: "Flat Design Website",
    body: "Sell more with bespoke storefronts engineered for conversions.",
    cta: ["View Work"],
    images: [Acc1, Acc2, Acc3, Acc4],
  },
  {
    title: "Landing Pages",
    body: "High-impact funnels for campaigns and launches.",
    cta: ["See Case Studies"],
    images: [Acc1, Acc2, Acc3, Acc4],
  },
  {
    title: "Responsive Websites",
    body: "Pixel-perfect across every device.",
    cta: ["Book a Call"],
    images: [Acc1, Acc2, Acc3, Acc4],
  },
  {
    title: "WordPress Websites",
    body: "Enterprise-ready experiences on WordPress.",
    cta: ["Discover More"],
    images: [Acc1, Acc2, Acc3, Acc4],
  },
];
import Image from "astro/components/Image.astro";
import Acc1 from "../../assets/accordion/1.png";
import Acc2 from "../../assets/accordion/2.png";
import Acc3 from "../../assets/accordion/3.png";
import Acc4 from "../../assets/accordion/4.png";
const {
  title = "Website Services That set us apart",
  description = "Businesses may differentiate themselves from the competition online with a distinctive online presence thanks to our bespoke website services. Our staff has the know-how to provide custom solutions, whether it's designing a web application, constructing a content management system, or developing a unique e-commerce platform.",
  para = "Each corporate website built by Nixxon Australia is tailored to your company's specific demands and objectives. Our goal is to create a professional, branded website for your company that will set it out from the competition.",
  panels = panelsDummy,
} = Astro.props;
---

<section class="internal-padding">
  <h2
    class="mb-1 text-xl font-semibold text-[#000047] md:text-2xl lg:text-3xl xl:text-4xl 2xl:text-[40px]"
  >
    {title}
  </h2>
  <h3
    class="mb-3 text-xs text-[#000000] md:text-sm lg:text-base xl:text-xl 2xl:text-xl"
  >
    {description}

    {para}
  </h3>

  <ul
    class="accordion-container mx-auto flex h-[600px] max-w-[1300px] overflow-hidden text-white"
    data-accordion
  >
    {
      panels.map((panel, index) => (
        <li
          class="accordion-item relative flex bg-gradient-to-r from-[#101E39] to-[#643DB4] transition-all duration-[1.2s] ease-in"
          data-accordion-item
          data-active={index === 0 ? "true" : "false"}
          aria-expanded={index === 0 ? "true" : "false"}
        >
          {/* Vertical title always on the left */}
          <div class="accordion-label flex h-full w-[70] items-center justify-center px-8">
            <h3 class="writing-vertical-lr rotate-180 text-lg font-semibold text-white uppercase xl:text-xl 2xl:text-[22px]">
              {panel.title}
            </h3>
          </div>

          {/* Content panel - shown when active */}
          <div class="accordion-content flex flex-col overflow-hidden px-5 py-6 text-left">
            <h3 class="accordion-content-item mb-2 text-lg leading-tight font-semibold text-white xl:mb-4 xl:text-xl 2xl:text-2xl">
              {panel.title}
            </h3>

            <p class="accordion-content-item text-xs text-white xl:text-sm xl:leading-6 2xl:text-base">
              {panel.body}
            </p>

            <div class="accordion-content-item grid w-full grid-cols-2 gap-2 py-2 lg:grid-cols-4">
              {panel.images.map((imgSrc, imgIndex) => (
                <div class="image-wrapper overflow-hidden rounded-xl transition-all duration-700 ease-in-out hover:scale-110">
                  <Image
                    src={imgSrc}
                    alt={`Accordion Image ${imgIndex + 1}`}
                    class="accordion-img aspect-square w-full object-cover"
                  />
                </div>
              ))}
            </div>

            <div class="accordion-content-item mt-4 flex flex-wrap gap-3">
              <span class="get-started-btn btn-animate flex items-center justify-center text-[10px] md:text-xs lg:text-sm">
                Get Started
              </span>
              <span class="btn-text-animate flex items-center text-[10px] md:text-xs lg:text-sm">
                Live Chat
                <svg
                  width="21"
                  height="21"
                  viewBox="0 0 21 21"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                  class="arrow-icon ml-2"
                >
                  <path
                    d="M15.3733 11.0958L8.03537 18.4338C7.68147 18.7877 7.1077 18.7877 6.75384 18.4338L5.89799 17.5779C5.54469 17.2246 5.54401 16.652 5.89648 16.2979L11.7119 10.455L5.89648 4.61224C5.54401 4.25811 5.54469 3.68551 5.89799 3.33222L6.75384 2.47636C7.10774 2.12246 7.6815 2.12246 8.03537 2.47636L15.3733 9.81429C15.7272 10.1682 15.7272 10.7419 15.3733 11.0958Z"
                    fill="white"
                  />
                </svg>
              </span>
            </div>
          </div>

          {/* Divider line */}
          <span class="absolute inset-y-0 right-0 w-[1px] bg-white/10" />
        </li>
      ))
    }
  </ul>
</section>

<script>
  import { gsap } from "../../utils/gsapUtils.js";

  document.addEventListener("DOMContentLoaded", () => {
    const accordion = document.querySelector("[data-accordion]");
    if (!accordion) return;

    const items = [...accordion.querySelectorAll("[data-accordion-item]")];
    const totalItems = items.length;

    // Configuration
    const MAX_ACTIVE_PX = 800; // preferred max px for expanded panel
    const MIN_INACTIVE_PX_DESKTOP = 100; // minimum px for collapsed panels on desktop
    const MIN_INACTIVE_PX_MOBILE = 80; // min px on mobile

    // helper: compute active/inactive widths (percent) based on current container width
    function computeWidths(containerWidth) {
      const minInactivePx =
        window.innerWidth <= 768
          ? MIN_INACTIVE_PX_MOBILE
          : MIN_INACTIVE_PX_DESKTOP;

      // Maximum active width we can afford while keeping minInactive for others
      const maxPossibleActivePx = Math.max(
        0,
        containerWidth - minInactivePx * (totalItems - 1),
      );

      // Pick active width: prefer MAX_ACTIVE_PX but clamp to available space
      let activePx = Math.min(MAX_ACTIVE_PX, maxPossibleActivePx);

      // If there's no room (very small container), fallback to proportional split (60%/40%)
      if (activePx <= 0) {
        activePx = Math.floor(containerWidth * 0.6);
      }

      // Distribute remaining width to inactive panels
      const remainingForInactive = Math.max(0, containerWidth - activePx);
      const inactivePx = Math.floor(
        remainingForInactive / Math.max(1, totalItems - 1),
      );

      // Convert to percentages so CSS width sums to ~100% (avoids rounding gaps by using float)
      const activePercent = (activePx / containerWidth) * 100;
      const inactivePercent = (inactivePx / containerWidth) * 100;

      return { activePercent, inactivePercent };
    }

    // Initial setup
    setupAccordion();

    // Handle window resize
    window.addEventListener("resize", setupAccordion);

    function setupAccordion() {
      const containerWidth = accordion.clientWidth;
      const { activePercent, inactivePercent } = computeWidths(containerWidth);

      // Apply widths for each item based on active state
      items.forEach((item) => {
        const isActive = item.dataset.active === "true";
        item.style.width = isActive
          ? `${activePercent}%`
          : `${inactivePercent}%`;

        // If active, animate its content
        if (isActive) animateActiveContent(item);
      });
    }

    // Animate active content
    function animateActiveContent(activePanel) {
      if (!activePanel) return;

      // Kill any ongoing animations
      gsap.killTweensOf(
        activePanel.querySelectorAll(".accordion-content-item"),
      );

      // Animate in the content items with stagger
      gsap.fromTo(
        activePanel.querySelectorAll(".accordion-content-item"),
        { opacity: 0, x: -20 },
        {
          opacity: 1,
          x: 0,
          duration: 0.5,
          stagger: 0.1,
          ease: "power2.out",
          delay: 0.2,
        },
      );
    }

    // Set active item
    function setActive(target) {
      // Don't do anything if already active
      if (target.dataset.active === "true") return;

      items.forEach((item) => {
        const isActive = item === target;
        item.dataset.active = isActive ? "true" : "false";
        item.setAttribute("aria-expanded", isActive ? "true" : "false");
      });

      // Recalculate widths and animate via GSAP for smooth transition
      const containerWidth = accordion.clientWidth;
      const { activePercent, inactivePercent } = computeWidths(containerWidth);

      items.forEach((item) => {
        gsap.to(item, {
          width:
            item.dataset.active === "true"
              ? `${activePercent}%`
              : `${inactivePercent}%`,
          duration: 0.8,
          ease: "power2.inOut",
        });
      });

      // Animate in the content for newly active panel
      if (target.dataset.active === "true") {
        setTimeout(() => animateActiveContent(target), 200);
      }
    }

    // Click and hover handlers
    items.forEach((item) => {
      // Click handler works on all devices
      item.addEventListener("click", (e) => {
        e.preventDefault();
        setActive(item);
      });

      // Add hover effect only for non-touch devices
      if (window.matchMedia("(hover: hover)").matches) {
        item.addEventListener("mouseenter", () => setActive(item));
      }
    });

    // Initial animations when accordion comes into view
    gsap.from(accordion, {
      opacity: 0,
      y: 30,
      duration: 0.8,
      ease: "power2.out",
      scrollTrigger: {
        trigger: accordion,
        start: "top 80%",
      },
    });
  });
</script>

<style>
  .accordion-container {
    list-style: none;
    padding: 0;
  }

  .accordion-item {
    cursor: pointer;
    width: 100px; /* Default width */
  }

  .accordion-item[data-active="true"] {
    width: 1000px;
  }

  .accordion-label {
    flex-shrink: 0;
    /* background-color: rgba(11, 26, 54, 0.6); */
  }

  .accordion-content {
    width: 0;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease;
  }

  .accordion-item[data-active="true"] .accordion-content {
    width: auto;
    opacity: 1;
    visibility: visible;
  }

  .writing-vertical-lr {
    writing-mode: vertical-lr;
    text-orientation: mixed;
  }

  .get-started-btn {
    width: 136.41px;
    height: 40.26px;
    background: #643db4;
    border-radius: 27.0647px 38.6638px 5.15517px 27.0647px;
    transition:
      transform 0.2s ease,
      box-shadow 0.2s ease;
    will-change: transform;
  }

  .get-started-btn:hover {
    box-shadow: 0 4px 12px rgba(100, 61, 180, 0.25);
    transform: scale(1.05);
  }

  .image-wrapper {
    aspect-ratio: 1/1;
    display: block;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .accordion-item {
      width: 50px; /* Smaller width on mobile */
    }

    .accordion-item[data-active="true"] {
      width: calc(100% - (80px * (var(--total-items) - 1)));
    }

    .accordion-label {
      width: 80px;
    }

    .image-wrapper {
      height: auto;
    }
  }
</style>
