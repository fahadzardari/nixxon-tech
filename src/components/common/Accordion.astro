---
const panelsDummy = [
  {
    title: "Corporate Websites",
    body: "Each corporate website built by Nixxon Australia is tailored...",
    cta: ["Get Started", "Live Chat"],
    images: [Acc1, Acc2, Acc3, Acc4],
  },
  {
    title: "E-Commerce Websites",
    body: "Sell more with bespoke storefronts engineered for conversions.",
    cta: ["View Work"],
    images: [Acc1, Acc2, Acc3, Acc4],
  },
  {
    title: "Flat Design Website",
    body: "Sell more with bespoke storefronts engineered for conversions.",
    cta: ["View Work"],
    images: [Acc1, Acc2, Acc3, Acc4],
  },

  {
    title: "Landing Pages",
    body: "High-impact funnels for campaigns and launches.",
    cta: ["See Case Studies"],
    images: [Acc1, Acc2, Acc3, Acc4],
  },
  {
    title: "Responsive Websites",
    body: "Pixel-perfect across every device.",
    cta: ["Book a Call"],
    images: [Acc1, Acc2, Acc3, Acc4],
  },
  {
    title: "WordPress Websites",
    body: "Enterprise-ready experiences on WordPress.",
    cta: ["Discover More"],
    images: [Acc1, Acc2, Acc3, Acc4],
  },
];
import Image from "astro/components/Image.astro";
import Acc1 from "../../assets/accordion/1.png";
import Acc2 from "../../assets/accordion/2.png";
import Acc3 from "../../assets/accordion/3.png";
import Acc4 from "../../assets/accordion/4.png";
const {
  title = "Website Services That set us apart",
  description = "Businesses may differentiate themselves from the competition online with a distinctive online presence thanks to our bespoke website services. Our staff has the know-how to provide custom solutions, whether it's designing a web application, constructing a content management system, or developing a unique e-commerce platform.",
  para = "Each corporate website built by Nixxon Australia is tailored to your company's specific demands and objectives. Our goal is to create a professional, branded website for your company that will set it out from the competition.",
  panels = panelsDummy,
} = Astro.props;
---

<section class="internal-padding">
  <h2
    class="mb-1 font-semibold text-[#000047] lg:text-3xl xl:text-4xl 2xl:text-[40px]"
  >
    {title}
  </h2>
  <h3 class="mb-3 font-medium text-[#000000] lg:text-lg xl:text-xl 2xl:text-xl">
    {description}
  </h3>
  <p class="mb-12 text-xs text-[#2A2111] xl:text-sm 2xl:text-base">
    {para}
  </p>
  <div
    data-accordion
    class="horizontal-accordion mx-auto flex h-[600px] max-w-[1300px] overflow-hidden bg-gradient-to-r from-[#0B1A36] via-[#4B1E93] to-[#6F1DB7] text-white"
  >
    {
      panels.map((panel, index) => (
        <button
          type="button"
          data-accordion-item
          data-active={index === 0}
          aria-expanded={index === 0 ? "true" : "false"}
          class="group relative flex flex-col justify-between transition-[flex-basis] duration-[1.5s] ease-out focus:outline-none"
          style={`--basis: ${index === 0 ? "65%" : "6.75%"};`}
        >
          <div class="flex h-full w-full">
            {/* Vertical title for active state - matching inactive width */}
            <div class="hidden h-full w-[4.75vw] items-center justify-center group-data-[active=true]:flex">
              <h3 class="writing-vertical-lr accordion-title rotate-180 text-[22px] font-semibold text-white uppercase">
                {panel.title}
              </h3>
            </div>

            {/* Content area for active state */}
            <div class="accordion-content flex h-full flex-1 flex-col px-3 py-6 text-left group-data-[active=false]:hidden">
              <h3 class="accordion-content-item pb-4 text-lg leading-tight font-semibold text-white xl:text-xl 2xl:text-2xl">
                {panel.title}
              </h3>
              <p class="accordion-content-item text-sm leading-6 text-white 2xl:text-base">
                {panel.body}
              </p>
              <div class="accordion-content-item flex gap-x-2 py-2">
                {panel.images.map((imgSrc, imgIndex) => (
                  <Image
                    src={imgSrc}
                    alt={`Accordion Image ${imgIndex + 1}`}
                    class="accordion-img min-h-[168px] aspect-square  cursor-pointer rounded-xl px-2 transition-all duration-700 ease-in-out hover:scale-125"
                  />
                ))}
              </div>
              <div class="accordion-content-item flex flex-wrap gap-3 pt-6">
                <span class="get-started-btn btn-animate flex items-center justify-center text-sm">
                  Get Started
                </span>
                <span class="btn-text-animate flex items-center text-sm">
                  Live Chat
                  <svg
                    width="21"
                    height="21"
                    viewBox="0 0 21 21"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                    class="arrow-icon ml-2"
                  >
                    <path
                      d="M15.3733 11.0958L8.03537 18.4338C7.68147 18.7877 7.1077 18.7877 6.75384 18.4338L5.89799 17.5779C5.54469 17.2246 5.54401 16.652 5.89648 16.2979L11.7119 10.455L5.89648 4.61224C5.54401 4.25811 5.54469 3.68551 5.89799 3.33222L6.75384 2.47636C7.10774 2.12246 7.6815 2.12246 8.03537 2.47636L15.3733 9.81429C15.7272 10.1682 15.7272 10.7419 15.3733 11.0958Z"
                      fill="white"
                    />
                  </svg>
                </span>
              </div>
            </div>

            {/* Vertical title only for inactive state - full width */}
            <div class="accordion-inactive hidden h-full w-full items-center justify-center bg-gradient-to-r from-[#101E39] to-[#643DB4] group-data-[active=false]:flex">
              <h3 class="writing-vertical-lr accordion-title rotate-180 text-[22px] font-semibold text-white uppercase">
                {panel.title}
              </h3>
            </div>
          </div>

          <span class="pointer-events-none absolute inset-y-0 left-0 w-[1px] bg-white/10" />
        </button>
      ))
    }
  </div>
</section>

<script>
  import { gsap } from "../../utils/gsapUtils.js";

  document.addEventListener("DOMContentLoaded", () => {
    const accordion = document.querySelector("[data-accordion]");
    if (!accordion) return;

    const items = [...accordion.querySelectorAll("[data-accordion-item]")];
    const totalItems = items.length;

    // Calculate widths - narrower inactive tabs to fit better
    const inactiveWidth = 5.75; // Each inactive tab width
    const totalInactiveWidth = inactiveWidth * (totalItems - 1);
    const activeWidth = 100 - totalInactiveWidth;

    const widths = { active: `${activeWidth}%`, inactive: `${inactiveWidth}%` };

    // Initial animations for the accordion when it comes into view
    gsap.from(accordion, {
      opacity: 0,
      y: 30,
      duration: 0.8,
      ease: "power2.out",
      scrollTrigger: {
        trigger: accordion,
        start: "top 80%",
      },
    });

    // Animate the initial active content
    animateActiveContent(items.find((item) => item.dataset.active === "true"));

    function setActive(target) {
      // Don't do anything if already active
      if (target.dataset.active === "true") return;

      items.forEach((item) => {
        const isActive = item === target;
        item.dataset.active = isActive ? "true" : "false";
        item.setAttribute("aria-expanded", isActive ? "true" : "false");
        item.style.setProperty(
          "--basis",
          isActive ? widths.active : widths.inactive,
        );
      });

      // Animate content for newly active panel
      if (target.dataset.active === "true") {
        animateActiveContent(target);
      }
    }

    // Function to animate the content of active panel
    function animateActiveContent(activePanel) {
      if (!activePanel) return;

      // Reset any ongoing animations first
      gsap.killTweensOf(".accordion-content-item");

      // Animate the content items with stagger
      gsap.fromTo(
        activePanel.querySelectorAll(".accordion-content-item"),
        { opacity: 0, x: -20 },
        {
          opacity: 1,
          x: 0,
          duration: 0.5,
          stagger: 0.1,
          ease: "power2.out",
          delay: 0.3, // Delay to let panel expand first
        },
      );

      // Special animation for images
      // gsap.fromTo(
      //   activePanel.querySelectorAll(".accordion-img"),
      //   { opacity: 0, scale: 0.92 },
      //   {
      //     opacity: 1,
      //     scale: 1,
      //     duration: 0.6,
      //     stagger: 0.08,
      //     ease: "back.out(1.2)",
      //     delay: 0.4,
      //   },
      // );
    }

    items.forEach((item) => {
      item.addEventListener("click", () => setActive(item));

      // Add hover effect to open accordion
      item.addEventListener("mouseenter", () => setActive(item));
    });

    // Button hover animations
    const buttons = document.querySelectorAll(".btn-animate");
    buttons.forEach((btn) => {
      btn.addEventListener("mouseenter", () => {
        gsap.to(btn, { scale: 1.05, duration: 0.2, ease: "power1.out" });
      });

      btn.addEventListener("mouseleave", () => {
        gsap.to(btn, { scale: 1, duration: 0.2, ease: "power1.out" });
      });
    });

    // Text button with arrow animations
    const textButtons = document.querySelectorAll(".btn-text-animate");
    textButtons.forEach((btn) => {
      btn.addEventListener("mouseenter", () => {
        gsap.to(btn.querySelector(".arrow-icon"), {
          x: 4,
          duration: 0.3,
          ease: "power2.out",
        });
      });

      btn.addEventListener("mouseleave", () => {
        gsap.to(btn.querySelector(".arrow-icon"), {
          x: 0,
          duration: 0.3,
          ease: "power2.out",
        });
      });
    });
  });
</script>

<style>
  /* Make each item use the custom basis */
  .horizontal-accordion [data-accordion-item] {
    flex: 0 0 var(--basis, 6.75%);
  }

  .writing-vertical-lr {
    writing-mode: vertical-lr;
    text-orientation: mixed;
  }

  .get-started-btn {
    width: 136.41px;
    height: 40.26px;
    background: #643db4;
    border-radius: 27.0647px 38.6638px 5.15517px 27.0647px;
    transition:
      transform 0.2s ease,
      box-shadow 0.2s ease;
    will-change: transform;
  }

  .get-started-btn:hover {
    box-shadow: 0 4px 12px rgba(100, 61, 180, 0.25);
  }

  .accordion-title {
    transition:
      opacity 0.3s ease,
      transform 0.3s ease;
  }

  .accordion-inactive:hover .accordion-title {
    opacity: 0.9;
  }

  /* For smooth transitions between states */
  .accordion-content {
    opacity: 0;
    animation: fadeIn 0.4s ease-out 0.3s forwards;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  .arrow-icon {
    transition: transform 0.3s ease;
    will-change: transform;
  }

  .btn-text-animate:hover .arrow-icon {
    transform: translateX(4px);
  }
</style>
